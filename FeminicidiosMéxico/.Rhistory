install.packages("ggplot2")
install.packages("tidyverse")
install.packages("bnlearn")
install.packages("devtools")
devtools::install_github("BlakeRMills/MetBrewer")
devtools::install_github("BlakeRMills/MetBrewer")
install.packages("reshape2")
install.packages("C50")
library(c50)
library(c50)
library(C50)
data("iris")
iris[1;4,]
iris[1:4,]
iris[,1:4]
model <- c5.(iris[,1:4],iris[5])
model <- c5.0(iris[,1:4],iris[5])
model <- C5.0(iris[,1:4],iris[5])
IRIS[,5]
iris[,5]
model <- C5.0(x = iris[,1:4], y = iris[5])
model <- C5.0(x = iris[,1:4], y = iris[,5])
model
summary(model)
model[1]
model[2]
model[3]
model[4]
model[5]
model[6]
model[7]
model[8]
model[9]
model[10]
model[11]
model[12]
model[13]
model[14]
print(model[14])
model[14]
summary(model)
model[14]
plot(model)
model <- C5.0(x = iris[,1:4], y = iris[,5], rules = T)
summary(model)
model[15]
model[16]
model[12]
model[13]
print(model[13])
summary(model)
install.packages("RWeka")
library(RWeka)
model2 <- J48(Species ~ ., data = iris)
mdoel2
model2
model2[1]
model2[2]
model2[3]
model2[4]
model2[5]
model2[6]
model2[7]
model2[6]
model2[5]
model2[4]
model2[3]
model2[2]
model2[1]
str <- model2[1]
str
str <- model2$classifier
str
class(str)
str <- model2$classifier
print(str)
str <- model2$classifier$jclass
str <- model2$classifier$jobj
str <- model2$classifier['jclass']
str <- model2$classifier[,2]
str <- model2$classifier[2]
str <- model2$classifier[2,]
print(str)
class(str)
as.list(str)
toString(str)
str@jclass
str@jobj
str@
1
isS4(str)
isS3(str)
model[1]
model[2]
model[3]
model1[3]
model2[3]
model2[1]
model2[2]
model2[3]
model2[4]
model2[5]
model2[6]
model2
str <- print(model2$classifier)
as.party(model2)
library("partykit")
as.party(model2)
model2a <- as.party(model2)
View(model2a)
model2a[1]
model2a[2]
model2a[3]
model2a[4]
model2a[5]
model2a[6]
model2a[7]
model2a[8]
model2a[9]
model2[2]
model2[1]
model2[1]@jobj
model2$classifier@jobj
class(model2$classifier@jobj)
model2[[1]]
model2[[1]][[1]]
model2[[1]][1]
unclass(model2$classifier@jobj)
toString(unclass(model2$classifier@jobj))
getlemma(unclass(model2$classifier@jobj))
getLemma(unclass(model2$classifier@jobj))
model2[[1]]
toString(model2[[1]])
sprintf(mdoel2[[1]])
sprintf(model2[[1]])
sprintf(unclass(model2[[1]]))
unclass(model2[[1]])
sprintf(model2$classifier@jobj)
as.character(model2$classifier@jobj)
print(model2$classifier@jobj)
print(model2$classifier)
class(model2$classifier)
model2$classifier@jobjRef
model2$classifier@rJava
model2$classifier@package
print(model2$classifier)
sprint("%s", model2$classifier)
sprintf("%s", model2$classifier)
sprintf("%", model2$classifier)
sprintf("%s", model2$classifier, c(1))
model2$classifier
m <- model2$classifier
View(str)
str(model2$classifier)
value(model2$classifier)
.jmethods(model2$classifier)
library(rJava)
.jmethods(model2$classifier)
.jfields(model2$classifier)
.jconstructors(model2$classifier)
.jmethods(model2$classifier)
.jmethods(model2$classifier)
.jcall(model2$classifier, method = "public java.lang.String weka.classifiers.trees.J48.toString()")
.jcall(model2$classifier, method = "public java.lang.String weka.classifiers.trees.J48.toString")
.jcall(model2$classifier, method = "java.lang.String weka.classifiers.trees.J48.toString()")
.jcall(model2$classifier, method = "java.lang.String weka.classifiers.trees.J48.toString")
.jcall(model2$classifier, method = "toString")
.jcall(model2$classifier, "java.lang.String;", method = "toString")
.jcall(model2$classifier, "java.lang.String;", method = "weka.classifiers.trees.toString")
model2$classifier
model2$classifier$toString()
model2$classifier$toString()
m <- model2$classifier$toString()
str(m, "\n")
strsplit(m, "\n")
strsplit(m, c("\n",":"))
strsplit(m, c("\n",":"))
str_split(m, "\n")
strsplit(m, "\n")
strsplit(m, [ !]+)
strsplit(m, "[ !]+")
strsplit(m, "[:!]+")
strsplit(m, "[:!|]+")
strsplit(m, "[:!|\n]+")
strsplit(m, "[:!|\n\t]+")
m <- strsplit(m, "[:!|\n\t]+")
replace(m, " ")
replace(" ", m)
gsub(" ", m)
sub(" ", "", m)
as.list(sub(" ", "", m))
as.vector(sub(" ", "", m))
c(sub(" ", "", m))
sub(" ", "", m)
sub(" ", "", m)[1]
sub(" ", "", m)[[1]
]
library(stringr)
m <- str_split(m, "[:!|\n\t]+")
m <- strsplit(m, "[:!|\n\t]+")
str_replace(m, " ", "")
m <- strsplit(m, "[:!|\n\t]+")
m <- model2$classifier$toString()
m <- strsplit(m, "[:!|\n\t]+")
m
str_replace(m, " ", "")
str_replace(m, " ", "")
">" %in% m
m
any(m %like% ">")
grepl(">", m)
grepl(">|", m)
str_detect(m,">|")
str_detect(m,">|<=")
str_detect(m,">")
mapply('%in%', '>', b)
mapply('%in%', '>', m)
mapply('%in%', m, '>')
mapply('%in%', m, '>|')
mapply(grepl, m, '>')
mapply(grepl, '>', m)
mapply(grepl, '>', m) & mapply(mapply(grepl, '<=', m))
m
mapply(grepl, '>', m) &
mapply(mapply(grepl, '<=', m))
mapply(mapply(grepl, '<=', m))
mapply(grepl, '<=', m)
mapply(grepl, '>', m) & mapply(grepl, '<=', m)
mapply(grepl, '>', m) | mapply(grepl, '<=', m)
m[mapply(grepl, '>', m) | mapply(grepl, '<=', m)]
m <- strsplit(m, "[:!|\n\t]+")
model2 <- J48(Species ~ ., data = iris)
m <- model2$classifier$toString()
m <- strsplit(m, "[:!|\n\t]+")
m
[mapply(grepl, '>', m) | mapply(grepl, '<=', m)
mapply(grepl, '>', m) | mapply(grepl, '<=', m)
m[mapply(grepl, '>', m) | mapply(grepl, '<=', m)]
m[c(1)]
m
model2 <- J48(Species ~ ., data = iris)
m <- model2$classifier$toString()
m <- strsplit(m, "[:!|\n\t]+")
m
m <- strsplit(m, "[:!|\n\t]+")[[1]]
model2 <- J48(Species ~ ., data = iris)
m <- model2$classifier$toString()
m <- strsplit(m, "[:!|\n\t]+")[[1]]
m
m[mapply(grepl, '>', m) | mapply(grepl, '<=', m)]
model2 <- J48(Species ~ ., data = iris)
m <- model2$classifier$toString()
m <- strsplit(m, "[:!\n\t]+")[[1]]
m <- m[mapply(grepl, '>', m) | mapply(grepl, '<=', m)]
m
model2 <- J48(Species ~ ., data = iris)
m <- model2$classifier$toString()
m <- strsplit(m, "[:!|\n\t]+")[[1]]
m <- m[mapply(grepl, '>', m) | mapply(grepl, '<=', m)]
m
mapply(gsub, m, " ", "")
mapply(gsub, m, "", " ")
mapply(sub, m, " ", "")
mapply(sub, m, " ", "")[1]
mapply(sub, m, " ", "")[[1]]
sub(m, " ", "")
sub(" ", "", m)
gsub(" ", "", m)
gsub("[ <>=]+", "", m)
gsub("[<>=]+", "", m)
gsub("[ =]+", "", m)
m <- gsub("[ =]+", "", m)
strsplit(m,"[<>]+")
summary(model)
data.frame(strsplit(m,"[<>]+"))
data.frame(matrix(unlist(strsplit(m,"[<>]+"))))
data.frame(matrix(unlist(strsplit(m,"[<>]+"))), nrow = 2)
data.frame(matrix(unlist(strsplit(m,"[<>]+")), nrow = 2))
data.frame(matrix(unlist(strsplit(m,"[<>]+")), ncol = 2))
data.frame(matrix(unlist(strsplit(m,"[<>]+")), nrow = 2))
help("data.frame")
data.frame(t(matrix(unlist(strsplit(m,"[<>]+")), nrow = 2)))
m <- strsplit(m,"[<>]+")
m <- data.frame(t(matrix(unlist(m), nrow = 2)))
m
model2 <- J48(Species ~ ., data = iris)
m <- model2$classifier$toString()
m <- strsplit(m, "[:!|\n\t]+")[[1]]
m <- m[mapply(grepl, '>', m) | mapply(grepl, '<=', m)]
m <- gsub("[ =]+", "", m)
m
m <- strsplit(m,"[<>]+")
m
m <- data.frame(t(matrix(unlist(m), nrow = 2)))
m
library(dplyr)
m %>% group_by(X1)
m %>% group_by(X1) %>% summarise()
m %>% group_by(X1) %>% summarise(list(X2))
n <- m %>% group_by(X1) %>% summarise(list(X2))
n
View(n)
n <- m %>% group_by(X1) %>% summarise(X2= unique(list(X2)))
n <- m %>% group_by(X1) %>% summarise(X2 = list(unique(X2)))
model2
plot(model2)
m <- m %>% group_by(X1) %>% summarise(X2 = list(unique(X2)))
m
dlply(m,1,c)
matrix(m)
matrix(unlist(m))
unlist(m)
list(m)
rapply(m,as.list,how="list")
print(rapply(m,as.list,how="list"))
print(rapply(m,as.list,how="list"))[[2]]
m
file.exists("~/.ssh/id_rsa.pub")
library(dplyr)
library(stringr)
library(ggplot2)
library(reshape2)
library(patchwork)
library(MetBrewer)
install.packages(c("BiocManager", "blob", "bnlearn", "broom", "checkmate", "cli", "clipr", "colorspace", "commonmark", "crayon", "desc", "dplyr", "evaluate", "fansi", "gert", "glue", "haven", "jsonlite", "knitr", "magrittr", "matrixStats", "openssl", "plyr", "processx", "ps", "RColorBrewer", "Rcpp", "RcppEigen", "readxl", "rlang", "rmarkdown", "rprojroot", "scales", "testthat", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "waldo", "withr", "xfun", "yaml", "zoo"))
install.packages("installr")
library(installr)
updateR()
q()
extrafont::loadfonts(device = "win")
extrafont::font_import()
library(dplyr)
library(stringi)
library(ggplot2)
library(svglite)
library(reshape2)
library(MetBrewer)
library(viridisLite)
setwd("D:/ProyectosRandom/Dataviz/FeminicidiosMéxico/")
datos22 <- read.csv("IDEFC_NM_mar22.csv", encoding = "latin1")
datos22 <- datos22 %>% filter(Tipo.de.delito == "Feminicidio")
datos22 <- datos22 %>% select(Año, Entidad, Tipo.de.delito, Enero, Febrero, Marzo, Abril, Mayo,
Junio, Julio, Agosto, Septiembre, Octubre, Noviembre, Diciembre) %>%
melt(c("Año", "Entidad", "Tipo.de.delito"), value.name = "Valor", variable.name = "Mes") %>%
group_by(Año, Entidad, Tipo.de.delito) %>% summarise(Valor = sum(Valor, na.rm = T)) %>%
na.omit() %>% as.data.frame()
names(datos22)[names(datos22) == "Tipo.de.delito"] <- "Delito"
datos22 %>% group_by(x = ceiling(row_number()/32), Delito) %>%
summarise(Valor = sum(Valor), Año = mean(Año)) %>% ggplot() +
geom_segment(aes(x = 2015, xend = 2022, y = 0, yend = 0), color = "#f5f5f5") +
geom_segment(aes(x = 2015, xend = 2022, y = 200, yend = 200), color = "#f5f5f5") +
geom_segment(aes(x = 2015, xend = 2022, y = 400, yend = 400), color = "#f5f5f5") +
geom_segment(aes(x = 2015, xend = 2022, y = 600, yend = 600), color = "#f5f5f5") +
geom_segment(aes(x = 2015, xend = 2022, y = 800, yend = 800), color = "#f5f5f5") +
geom_segment(aes(x = 2015, xend = 2022, y = 1000, yend = 1000), color = "#f5f5f5") +
geom_vline(aes(xintercept = 2015), color = "#ededed") + geom_vline(aes(xintercept = 2016), color = "#ededed") +
geom_vline(aes(xintercept = 2017), color = "#ededed") + geom_vline(aes(xintercept = 2018), color = "#ededed") +
geom_vline(aes(xintercept = 2019), color = "#ededed") + geom_vline(aes(xintercept = 2020), color = "#ededed") +
geom_vline(aes(xintercept = 2021), color = "#ededed") + geom_vline(aes(xintercept = 2022), color = "#ededed") +
scale_y_continuous(limits = c(0,1000), breaks = c(0, 200, 400, 600, 800, 1000)) +
scale_x_continuous(breaks = c(2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022),
expand = expansion(0, 0.2), position = "bottom") +
geom_line(aes(x = Año, y = Valor, group = Delito, color = Delito), size = 0.75) +
geom_point(aes(x = Año, y = Valor, color = Delito), size = 3) +
geom_text(aes(x = Año, y = Valor, label = Valor), size = 3, vjust = 3) +
scale_color_manual(values = rocket(10)[4]) +
theme(panel.background = element_blank(), axis.title = element_blank(), legend.position = "none",
axis.ticks = element_blank(), axis.text = element_text(family = "PT Sans", colour = "black"),
panel.grid = element_blank())
datos22 <- read.csv("IDEFC_NM_mar22.csv", encoding = "latin1")
datos22 <- datos22 %>% filter(Tipo.de.delito == "Feminicidio")
datos22 <- datos22 %>% select(Año, Entidad, Tipo.de.delito, Enero, Febrero, Marzo, Abril, Mayo,
Junio, Julio, Agosto, Septiembre, Octubre, Noviembre, Diciembre) %>%
melt(c("Año", "Entidad", "Tipo.de.delito"), value.name = "Valor", variable.name = "Mes") %>%
group_by(Año, Entidad, Tipo.de.delito) %>% summarise(Valor = sum(Valor, na.rm = T)) %>%
na.omit() %>% as.data.frame()
names(datos22)[names(datos22) == "Tipo.de.delito"] <- "Delito"
datos22$Entidad <- stri_replace_all_regex(datos22$Entidad,
pattern = c("Baja California Sur"),
replacement = c("BS"),
vectorize = F)
datos22$Entidad2 <- stri_replace_all_regex(datos22$Entidad,
pattern = sort(unique(datos22$Entidad)),
replacement = c("AG", "BC", "BS", "CM", "CS", "CH", "CX", "CO",
"CL", "DG", "GT", "GR", "HG", "JC", "EM", "MI",
"MO", "NY", "NL", "OA", "PU", "QT", "QR", "SL",
"SI", "SO", "TB", "TM", "TL", "VE", "YU", "ZA"),
vectorize = F)
posiciones <- read.csv("Entidades.csv")
datos22 <- datos22 %>%  inner_join(posiciones, by = "Entidad2")
